 package com.ekgaon.sync;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.sql.Blob;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.ObjectUtils.Null;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.ekgaon.model.Databasehandler;
import com.ekgaon.onefin.Customer_Activity;
import com.ekgaon.onefin.Sync;
import com.ekgaon.onefin.activityBillingtab;
import com.ekgaon.util.BusinessLogic;
import com.ekgaon.util.HttpUploader;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.provider.Settings;
import android.util.Base64;
import android.view.View;
import android.widget.Adapter;

public class UpSync extends AsyncTask<String,Void,String>{
     ProgressDialog mProgressDialog;
    private Activity mActivity;
    private Adapter mAdapter;
    private String response;
    private ArrayList deviceList,expenseList,groupOBList,memberList;
    Databasehandler db;
    Context context;
    BusinessLogic b1=new BusinessLogic();
    private Calendar calobj;
    private String date_val;
    private byte[] photo;
    private ArrayList jsonList;
    String page;
    String start_time;
    public UpSync(Activity mActivity,String page) {
        Runtime rt = Runtime.getRuntime();
        System.runFinalization();
        System.gc();       
        rt.freeMemory();
        this.mActivity = mActivity;
        db = new Databasehandler(mActivity);
        Calendar cal = Calendar.getInstance();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
        System.out.println(dateFormat.format(cal.getTime()));
         start_time=String.valueOf(dateFormat.format(cal.getTime()));
         this.page = page;
     }
   
   

    @Override
    protected void onPreExecute(){
        mProgressDialog = new ProgressDialog(mActivity);
        mProgressDialog.setMessage("Upward synchronisaton is in progress. Please wait...");
        mProgressDialog.setIndeterminate(false);
        mProgressDialog.setCancelable(false);
        mProgressDialog.show();
    }   

    public String doInBackground(String... url){
        List<NameValuePair> params = null;
        String result = null;
        JSONObject mJSONObj;
        JSONObject mJSONObject = new JSONObject();
        JSONArray mJSONArray = new JSONArray();
           
        try{
            if (page.equals("upsync")) {               
                mJSONObj = getTablejsonArray("microfin_tab_details");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_external_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);                           
               
                mJSONObj = getDeviceRegTablejsonArray();
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_field_officer_time");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_billing");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_sav_withdraw_req");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_sav_withdrawa_amt");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_settings");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_products");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_loans");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_loan");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_group_ob");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_member_ob");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_member_meeting");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_loan_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_customer_loan_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_shg_loan_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_external_loan_requests");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfinance_external_accounts_insurance");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfinance_external_accounts_savings");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
                   
                mJSONObj = getTablejsonArray("microfinance_external_shg_savings");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                /*mJSONObj = getTablejsonArray("microfinance_external_shg_deposits");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);*/

                mJSONObj = getTablejsonArray("microfinance_external_accounts_subscription");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfinance_external_accounts_deposit");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfinance_external_accounts_loan");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_payment");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_receipts");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_loanemi");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_loan_repay");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);

                mJSONObj = getTablejsonArray("microfin_external_loanemi");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getTablejsonArray("microfin_customer_external_loanemi");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getMemberTablejsonArray();
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
            } else {
                mJSONObj = getTablejsonArray("microfin_tab_details");
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
               
                mJSONObj = getMemberTablejsonArray();
                if (mJSONObj.length() > 0)
                    mJSONArray.put(mJSONObj);
           
            }
       
            /*try{
            mJSONObj = getTablejsonArray("microfin_member_ob");
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
            }catch(Exception e){
                e.printStackTrace();
            }
       
        /*       
           
            mJSONObj = getMemberTablejsonArray();
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
            mJSONObj = getMemberTablejsonArray();
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
           
            mJSONObj = getTablejsonArray("microfin_report_request");
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
            mJSONObj = getTablejsonArray("microfin_email");
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
        /*                                   
               
            mJSONObj = getTablejsonArray("microfin_loan_requests");
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);
           
            mJSONObj = getTablejsonArray("microfin_loan_requests");
            if(mJSONObj.length() > 0)
                mJSONArray.put(mJSONObj);   
            */
               
            if(mJSONArray.length()> 0){
                mJSONObject.put("microfin", mJSONArray);
                params = new ArrayList<NameValuePair>();
                params.add(new BasicNameValuePair("microfin",mJSONObject.toString()));
                System.out.println("params========================-----------------------="+params);
                response =  postData(url[0],params);
                System.out.println("Response========================="+response);
                if(response==null){
                    System.out.println("inside the  nulll----------------------------");
                     result = "Data synchronization is interrupted Due to poor Network connection";
                }else{
                if(!response.equals("")){
                    System.out.println("inside the not equeal----------------------------");
                    if(response.equals("null")){
                        System.out.println("inside the  nulll----------------------------");
                         result = "Data sync was interrupted please try again later";
                        result = decodeResponce(response);
                     //mActivity.finish();
                    }else{
                        System.out.println("inside the not nulll----------------------------");
                     result = "All tables are updated";
                     if (page.equals("upsync")) {
                        db.update_sync("microfin_members");
                        db.update_sync("microfin_shg");
                        db.update_sync("microfin_devicereg");
                        db.update_sync("microfin_field_officer_time");
                        db.update_sync("microfin_external_loan_requests");               
                        db.update_sync("microfin_expense");
                        db.update_sync("microfin_shg_loans");
                        db.update_sync("microfin_shg_loan");
                        db.update_sync("microfin_group_ob");
                        db.update_sync("microfin_member_ob");
                        db.update_sync("microfin_shg_savings");
                        db.update_sync("microfin_member_meeting");               
                        db.update_sync("microfin_shg_deposit");
                        db.update_sync("microfin_receipts");
                        db.update_sync("microfin_customer_loan_requests");
                        db.update_sync("microfin_requests");
                        db.update_sync("microfinance_insurance");
                        db.update_sync("microfin_loanemi");
                        db.update_sync("microfin_external_loanemi");
                        db.update_sync("microfin_shg_requests");
                        db.update_sync("microfin_shg_loan_requests");
                        db.update_sync("microfin_shg_settings");
                        db.update_sync("microfin_shg_external_savings");
                        db.update_sync("microfin_shg_sav_withdrawa_amt");
                        db.update_sync("microfin_sav_withdraw_req");
                        //db.update_sync("member_loanemi");
                        //db.update_sync("microfinance_external_shg_savings");
                        //db.update_sync("microfinance_external_shg_deposits");
                        db.update_sync_time();
                     }else{
                db.update_sync("microfin_members");
                db.update_sync_time();
                db.update_sync("microfin_field_officer_time");
                     }   
                    }
                }               
               
                else{
                     result = "Data sync was interrupted please try again later";
                     //result="          Data sync was interrupted please try again later";
                    result = decodeResponce(response);
                }
                }
            }
         }catch(Exception e){
             result = e.getMessage().toString();
           
        }
        return result;       
    }
       
   
    public void onPostExecute(String msg){
        super.onPostExecute(msg);
        if(mProgressDialog != null)
            mProgressDialog.dismiss();
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        calobj = Calendar.getInstance();
        date_val=df.format(calobj.getTime());
         ContentValues values = new ContentValues();
            values.put("start_time",start_time);
            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");                  
            values.put("end_time",String.valueOf(dateFormat.format(calobj.getTime())));
            values.put("last_updated_time",date_val);
            values.put("status","Active");
            db.save(values,"microfin_sync");
        show_DialogSinglebutton(msg,mActivity);
    }
   
    private String decodeResponce(String response) throws JSONException{
        String result = "";
        JSONObject json = new JSONObject(response);
        JSONObject jsonResult= json.getJSONObject("result");
        if(!(jsonResult.has("microfin_devicereg"))){
        }else{
            result = result + "microfin_devicereg";
        }
        result = result + " not updated ! ";
        return result;
    }
   
    public String postData(String url,List<NameValuePair> params ) throws ClientProtocolException, IOException {
        String ServerResponse = null ;
        try{
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(url);
        httppost.setEntity(new UrlEncodedFormEntity(params));
      
        HttpResponse response = httpclient.execute(httppost);
         ServerResponse = EntityUtils.toString(response.getEntity());
        }catch(Exception e){
            e.printStackTrace();
        }
        return ServerResponse;
    }

    @Override
    protected void onProgressUpdate(Void... values){
   
    }

    /* Function to get Device reg table */
    protected JSONObject getDeviceRegTablejsonArray() throws JSONException, IOException{
        JSONObject deviceJSONObject = new JSONObject();
        JSONArray deviceJsonArray=new JSONArray();
        try{
        deviceList = db.getTableDetails("microfin_devicereg");
        if(deviceList != null && deviceList.size() > 0){
            for(int i = 0; i < deviceList.size(); i++) {
                JSONObject deviceObject = new JSONObject();
                HashMap device_map = (HashMap) deviceList.get(i);
                Set s=device_map.keySet();
                Iterator ii=s.iterator();
                while(ii.hasNext()){
                    String key=""+ii.next();
                    System.out.println("I am inside 164");
                    String value=""+device_map.get(key);
                    System.out.println("I am inside ELSE");
                    deviceObject.put(key,value);
                }
                deviceJsonArray.put(deviceObject);
            }
        }
        deviceJSONObject.putOpt("microfin_devicereg", deviceJsonArray);
    }catch(Exception e){
        e.printStackTrace();
    }
        return deviceJSONObject;
    }

   
    /* Function to get Member table */
    protected JSONObject getMemberTablejsonArray() throws JSONException{
        JSONObject memberJSONObject = new JSONObject();
        JSONArray memberJsonArray=new JSONArray();
        try{
        memberList = db.getTableDetails("microfin_members");
        if(memberList != null && memberList.size() > 0){
            for(int i = 0; i < memberList.size(); i++) {
                JSONObject memberObject = new JSONObject();
                HashMap member_map = (HashMap) memberList.get(i);
                Set s=member_map.keySet();
                Iterator ii=s.iterator();
                while(ii.hasNext()){
                    String key=""+ii.next();
                    String value=""+member_map.get(key);
                        memberObject.put(key,value);
                }
                memberJsonArray.put(memberObject);
            }
        }
        memberJSONObject.putOpt("microfin_members", memberJsonArray);
        }catch(Exception e){
            e.printStackTrace();
        }
        return memberJSONObject;
    }
   
   
    public void show_DialogSinglebutton(final String message,final Activity activity){
        AlertDialog.Builder builder = new AlertDialog.Builder(activity);
        //builder.setTitle("Error!Data sync was interrupted please try again later.");
        if(message.equals("         Data sync was interrupted please try again later")){
               builder.setTitle("Error !");
        }else{
        builder.setTitle("Info");
        }
        builder.setMessage( message);
        builder.setCancelable(false);
        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
             public void onClick(DialogInterface dialog, int id) {
            
                 if(message.equals("          Data sync was interrupted please try again later")){
                       Intent    i = new Intent(mActivity.getApplicationContext(),Sync.class);       
                       i.putExtra("type", "Failed");
                          mActivity.startActivity(i);
                        
                }else{
                    if(page.equals("kycsync")){
                           Intent    i = new Intent(mActivity.getApplicationContext(),Customer_Activity.class);       
                           mActivity.startActivity(i);
                    }else{
                       Intent    i = new Intent(mActivity.getApplicationContext(),Sync.class);       
                         i.putExtra("type", "Success");
                            mActivity.startActivity(i);
                    }
                }
                 dialog.dismiss();
                 activity.finish();
                 //activity.finish();
             }
        });
        AlertDialog alert = builder.create();
        alert.show();
    }   

    /* Function to get table */
    protected JSONObject getTablejsonArray(String tablename) throws JSONException{
        JSONObject jsonObject = new JSONObject();
        JSONArray jsonArray=new JSONArray();
        try{
        jsonList = db.getTableDetails(tablename);
        if(jsonList != null && jsonList.size() > 0){
            for(int i = 0; i < jsonList.size(); i++) {
                JSONObject jsObject = new JSONObject();
                HashMap js_map = (HashMap) jsonList.get(i);
                Set s=js_map.keySet();
                Iterator ii=s.iterator();
                while(ii.hasNext()){
                    String key=""+ii.next();
                    String value=""+js_map.get(key);
                    jsObject.put(key,value);
                }
                jsonArray.put(jsObject);
            }
        }
        jsonObject.putOpt(tablename, jsonArray);
        }catch(Exception e){
            e.printStackTrace();
        }
        return jsonObject;
    }
   
}

https://www.quora.com/What-is-the-difference-between-web-service-and-web-application
https://www.youtube.com/watch?v=r_RnroxTg3Y
https://iag.me/socialmedia/how-to-create-a-twitter-app-in-8-easy-steps/
https://github.com/iagdotme/MyFirstTwitterApp
https://github.com/J7mbo/twitter-api-php  ---its is correct
https://iag.me/socialmedia/build-your-first-twitter-app-using-php-in-8-easy-steps/

